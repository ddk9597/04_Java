/*  변수
프로그램 실행 시 사용할 값이 있다면 그 값은 변수 선언을 통해 먼저 메모리에 기록한다.
이렇게 기록 된 값은 지속적으로 사용 가능하다.

변수를 사용함으로써 얻는 이점은 아래와 같다.
1. 가독성이 좋아짐
2. 재사용성 증가로 인한 코드량 감소 -> 유지보수 용이

데이터 저장 단위
 - 비트 : 2진수 값 하나를 저장할 수 잇느 메모리공간. 
          데이터의 최소 저장 단위
 - 바이트 : 8개의 비트가 모여 하나의 바이트가 구성됨. 
            데이터처리, 문자의 최소 단위

변수의 선언
-> 메모리 공간에 데이터를 저장할 수 있는 공간을 할당하는 것.
[형태] : 자료형 변수명 ;
ex) boolean isTrue = true; 

// ----------------------------------------

자료형의 종류 - 종류별, 메모리순 정렬

1. 논리형
    1) boolean                  1 byte

2. 숫자형
    1) 정수형
        a. byte                 1 byte
        b. short                2 byte
        c. int(정수 기본)       4 byte
        d. long                 8 byte

    2) 실수형
        a. float                4 byte          
        b. double(실수 기본)    8 byte

3. 문자형
    1) char(문자 하나)          2 byte
    2) String : 변수 참조형. 문자를 이어어 쓰게 하는 변수.

// ----------------------------------

자료형의 종류 2 - 저장 범위 낮은순 정렬
(불차바숏인롱플더)
1. boolean      기본 값 : false
2. char         기본 값 : '\u0000'
3. byte         기본 값 : 0
4. short        기본 값 : 0
5. int          기본 값 : 0
6. long         기본 값 : 0L
7. float        기본 값 : 0.0f
8. double       기본 값 : 0.0 || 0.0d

* String : 참조형으로 저장 범위 따로 없음

// --------------------------------

변수 명명 규칙
1. 대소문자가 구분되며 길이 제한 없음
2. "예약어" 사용하면 안된다
3. 숫자로 시작하면 안된다
4. 특수문자는 _ 와 $만 허용됨
5. 첫글자는 소문자로, 카멜표기법

* 예약어 : 자료형과 같이 java 내에서 사용되는 뜻이 있는 단어

// --------------------------------------

값 대입과 리터럴

    값 대입 : 생성한 변수(저장공간)에 값을 대입하는 것
     -> 변수는 한개의 데이터만 보관하며 
        변수 중복 선언 시 마지막에 대입한 값으로 덮어씌워짐

    리터럴 : 변수에 대입되는 값 자체.
     -> 자료형에 따라 바뀔 수 있음.
     
// --------------------------------------

 변수의 초기화

초기화 : 처음으로 값을 저장하는 것.
         지역변수는 반드시 초기화해야 한다.

선언과 동시에 초기화 가능함.

// --------------------------------------

상수 : 한번만 저장(기록) 할 수 있는 메모리.
- 선언과 동시에 초기화 가능.
- 초기화 이후 다른 데이터(값)을 대입할 수 없다.

// --------------------------------------

문자 1글자 : char
''로 표시함

문자열 : String
""로 표시함
String 객체를 이용해 저장(외부 메서드. import 필요)
String 초기화 시 "" 안의 문자열 이외에 다른 자료형 추가 가능하나
결과는 항상 문자열로 표기됨

ex) 
String str5 = "참치 김밥 " + 5 + "줄 주세요" ;
		System.out.println("str5 : " + str5) ; -> 숫자 5 문자열로 표기

// --------------------------------------

 형변환 : 값(Data)의 자료형을 바꾸는 것 (boolean 제외)

형변환이 이루어지는 경우 -> 컴퓨터의 값 처리 원칙이 지켜지지 않은 경우

<컴퓨터의 값 처리 원칙>
    1. 대입, 계산, 계산의 결과 모두 같은 종류의 자료형끼리만 가능하다.

형변환 예시
    1. (int)10      -> (double)10.0
    2. (char)A      -> (int)65
    3. (float)3.14f -> (int)3

// --------------------------------------
    
자동형변환 : 값의 범위가 큰 자료형 과 값의 범위가 작은 자료형의 연산 시
             "컴파일러가 자동으로 값의 범위가 작은 자료형을 값의 범위가 큰 자료형으로 변환
             * 컴파일러 :Compiler. 소스 코드를 기계어 또는 바이트 코드로 번역하는 프로그램

byte -> short -> int -> long -> float -> double
        char  -> int -> 위와 동일
* boolean 은 제외된다.
* byte, short의 자료형 값의 계산 결과는 무조건 int로 처리한다. (정수 기본값)

// --------------------------------------

강제형변환 : 값의 범위가 큰 자료형을 값의 범위가 작은 자료형으로 변환.
             강제 형변환 시 데이터 손실이 발생할 수 있음 -> 데이터의 변형, 손실을 감수하고 강제 형변환한다.

[작성법] : (자료형) 변수명 || 값; -> 지정된 자료형으로 변경된다.

/*
// 강제형변환 확인 1 //
    // -> 자료형변환 + 데이터 손실
    
    int num1 = 290;
    byte result1 = (byte) num1; // 강제 형변환
    
    System.out.println("num1 :" + num1); // 290
    System.out.println("result1 :" + result1); // 34
    
    // 강제형변환 확인2 
    // - 실수를 정수로 변환해서 소수점을 없애기
    // (데이터 손실을 활용)
    
    double num2 = 123.123456789;
    int result2 = (int) num2 ; // 강제형변환
    System.out.println("num2 : " + num2 ); // 123.123456789
    System.out.println("result2 : " + result2 ); // 123
    
    /* 난수 + 강제형변환*/
    
    // 난수 : Math.random(); 범위 : 0.0 <= x < 1.0 ;
    
    // 1~ 10 사이 난수
    //int random = (int)(Math.random() * 10 + 1); // (int)강제형변환을 통해 소수점 아래 자리를 모두 제거함. Js Math.floor 기능
    //System.out.println("random :" + random);
    
    
    // 강제형변환 확인 3 
    // -> 의도적으로 강제 형변환. 값의 범위가 작은 것에서 큰 것으로.
    
    System.out.println(123);		 // (int)	123
    System.out.println((double)123); // (double)123.0
    
    // 강제형변환 확인 4
    // + 값 처리 원칙(같은 자료형 연산 시 같은 자료형 결과가 나온다.)
    // 결과가 나올 때에는 값 처리 원칙이 가장 우선된다.
    
    int num3 = 5;
    int num4 = 2;
    
    System.out.println(num3 / num4); 		          // (int)(5/2) == 2
    System.out.println((double)(num3 / num4));        // (double)((int) 5/ (int) 2) == 2.0 
    System.out.println((double)num3 / (double)num4);  // 5.0 / 2.0 == 2.5 ;
    
    /* 강제형변환 + 자동형변환 + 값처리원칙 */
    System.out.println((double)num3 / num4);  // 5.0 / 2.0 == 2.5 ;
    
    // 다음 순서값의 크기가 서로 다른 연산이 일어남.
    
    // * 강제형변환
    // (double)5.0 / (int)2
    
    // * 자동형변환
    // (double)5.0 / (double) 2.0
    
    // * 값 처리 원칙
    // (double)5.0 / (double) 2.0 == (double) 2.5
    
    // -----

    // 강제형변환 확인 5
    // 문자(char) <-> 유니코드(int)
    
    System.out.println("A의 번호 : " + 'A' ); // A
    System.out.println("A의 번호 : " + (int)'A' ); // 65
    System.out.println("84번 문자 : " + (char)84 ); // T
    System.out.println("83번 문자 : " + (char)83 ); // S
    

// --------------------------------------

// 데이터 오버플로우
//      0000 ~ 9999 까지 표기 가능한 4자리 기계식 카운터에
//      9999인 상태에서 1을 더하면 0000이 되는 것 처럼
//      각 자료형의 허용 범위를 초과하여 비트를 침범하는 것을 오버플로우 라고 한다.

// --------------------------------------



// 객체지향 언어
    /*

    * 현실 객체       : 속성(값, data)와 기능(동작, 행동)이 다른 것들과 구분되어 식별 가능한 것

    * 객체 지향 언어  : 현실 객체들을 컴퓨터가 알아먹을 수 있게 만든 문법

    * 자바 객체       : 클래스에 정의된 내용대로 new 연산자를 통해 Heap메모리 영역에 생성한 것
    
    * class           : 객체의 특성(속성, 기능)에 대한 정의를 한 것. 추상화, 캡슐화가 반드시 적용되어야 한다
        -> 추상화 효과 : 코드의 유연성 확보. 상속, 다형성
        -> 캡슐화 효과 : 데이터의 직접 접근 제한 막기 위해. 부가기능 : 정보은닉(외부에서 내부 보이지 않음)
            직접 접근 제한 : 객체의 데이터가 쉽게 변경될 가능성 낮춤

    * new 연산자      : 클래스의 정의내린 내용(객체, 배열 등)을 저장된 heap 메모리 영역에 대입하는 연산자

    * 추상화          : 큰 거름망. 유연성을 확보하기 위해 속성과 기능에 구체적인 것은 소거하고 공통으로 적용되는 내용을 추출하는 과정
								  공통점만 추출, 불필요한 부분 제거
								
    * 캡슐화          : 추상화를 통해 정리된 특성(속성, 기능)을 하나로 묶고 속성(데이터)의 직접 접근을 방지하는것

    * 캡슐화 원칙     : 객체 속성 직접 접근 차단
        1) private    : 직접 접근을 차단하는 키워드. 현재 객체만 접근 가능하게 함
        2) 간접 접근 방법 작성 -> private 자료형 자료명;
        3) 간접 접근 기능 : 매개변수 활용하여 접근함
            Java 매개변수 : 변수명 앞에 자료형 필수적으로 붙어야 함!!!!

    
    heap 영역 할당 시 변수 / 요소가 빈칸으로 있을 수 없다.
    -> 기본 값이 대입되어 있음
    -> 메서드 쓰기 전 값 대입 하지 않아도 작동은 됨.
    * 
    */



	/*오브젝트 : 현실 객체
	인스턴스 : 가상 객체(속성, 기능을 부여하여 class 작성 후 new로 선언한 것)






    ** 클래스 접근제한자 **

    1. public  : 같은 패키지 내, 전체, 모두에게 접근할 수 있게
        ex) public class 클래스명

    2. protected : 해당 클래스, 같은 패키지, 후손 클래스 내
    
    3. (default) : public 생략. 같은 패키지 안에 있을 때에만 접근 가능함
        ex) class 클래스명

    4. private : 해당 클래스 내부에서만 사용 가능(캡슐화)



클래스 : 속성(필드) + 기능
필드 작성법 : []:생략 가능
// 특별한 경우 제외하고 캡슐화 원칙 사용

    [접근제한자][예약어]class 필드명 {
        [접근제한자][예약어]자료형 변수명 [= 초기값];
    }

    예약어 종류
        - final : 상수. 한번 할당되면 변경 불가함
        - static : 정적인. 생성 후 없어지지 않음
                   -> 프로그램이 실행될 때
                      static 키워드가 작성된 필드/메서드를
                      (static(=정적/공유))메모리 영역에 생성 
                      할당 시 이름은 
        효과 : 언제, 어디서든 누구든지 접근(확인, 참고, 사용, 수정)가능함

        static 반대개념 : 동적인 (생성, 소멸)
        동적 ex)-> new 클래스명() : 객체 생성
                -> 객체를 참조하는 변수가 없어짐 : 객체 소멸
                    Heap 메모리 영역 == 동적 메모리 영역임
    - 

    // ------------------------------------------- //
    
클래스변수와 멤버 변수 차이
    - static 예약어 유무 차이


	1. 클래스 변수(Static Variables) //static 있음
 - static 키워드로 선언된 변수 
	Ex) public calss Static{
		 int num = 0; 
		}
		
 - 클래스에 속하며 모든 인스턴스(가상객체)가 공유하는 변수
 - 한 번 생성되면 프로그램이 실행되는 동안 메모리에 남아있음
 - this 키워드 사용 불가능

	2. 멤버 변수(인스턴스 변수)
	- 클래스 내부에서 선언됨
	- static 키워드 없이 선언됨
	- 클래스의 인스턴스가 생성될 때마다 생성됨
	- 클래스 내부에서 this 키워드를 통해 접근 가능함

// ------------------------------------------------- //

생성자(Constructor)
- 객체를 초기화하는 메서드. 객체가 생성될 때 자동으로 호출됨
- 클래스 이름과 동일하며 반환 타입이 없음
- 객체의 초기 상태를 설정하거나 피드를 초기화하는데 사용됨
    특징
    1. 생성자 이름은 클래스 이름과 동일함
    2. 반환 타입이 없음
    3. 객체 생성시 자동 호출
        -> 객체 생성 할 때 new 키워드와 함께 생성자가 호출됨
    4. 오버로딩 기능(여러개의 생성자를 정의하여 다양한 초기화 방법 제공 가능)

생성자 예시
        public class MyClass {
            private int myField;

        // 기본 생성자
        public MyClass() {
            myField = 0; // 초기화
        }

        // 매개변수가 있는 생성자
        public MyClass(int initialValue) {
            myField = initialValue; // 초기화
        }

        // 다른 작업을 수행하는 메서드
        public void doSomething() {
            // 작업 수행
        }
    }

// ---------------------------------------- //

오버로딩 : 같은 이름, 다른 매개변수의 의 메서드를 여러 개 정의하는 것
- 이름은 같다
- 매개변수의 타입, 개수, 순서 등이 서로 다르다
    -> 불러올 때 매개변수로 구분한다!!!

// ---------------------------------------- //

상속
정의
    - 다른 클래스가 가지고 있는 멤버(필드, 메서드)를 
      새 클래스가 자신의 멤버처럼 사용하게 하는 기능

상속의 목적과 기능

- 클래스 재사용
    -> 코드 길이 감소
    -> 적은 양의 코드로 새로운 클래스 작성 가능
    -> 중복 제거, 생산성 및 유지보수성 증가

- 연관된 일련의 클래스들에 대한 공통적인 규약 정의
    -> 공통적으로 코드를 관리하기에 코드의 추가 및 변경 용의

상속 방법

    클래스 간의 상속 시에는 extends 키워드 사용

    [접근제한자] className01 extends className02( ) { }

    className01 : 자식 클래스
    className02 : 부모 클래스

단일상속만 지원됨

    Java에서는 누구의 자식인지 알아내는 것이 불가능하므로
    단일상속만 지원됨!!!
    다중상속은 미지원됨!!!!!

상속의 특징

1. 모든 클래스는 Object 클래스의 후손이다

2. 부모 클래스의 생성자(초기화) 블록은 상속 안됨
    - 상속이 성립되지 않으므로 오버라이딩의 대상이 아님
    - 부모의 생성자에서 초기화 된 값이 자식 클래스로 상속되는 것

3. 부모의 private 멤버는 상속은 되지만 직접 접근 불가
    자식 객체 생성 시 부모의 필드 값도 전달 받은경우
    자식 생성자 안에서 부모의 private 필드에 직접 접근하여 대입 불가함
    - 접근 방법
    - 1. getter, setter 메서드
    - 2. super()로 전달받은 부모 필드 값을 부모 생성자쪽으로 넘겨서 생성하거나

super()
부모 객체의 생성자를 호출하는 메서드
* 생성자는 상속 불가하므로 호출한다!
* 후손 객체 생성 시 반드시 맨 첫줄에 작성
* 매개변수 있는 부모생성자 호출방법 :  super(매개변수, 매개변수)로 호출함

참조변수 super.
상속을 통한 자식 클래스 정의시 해당 자식 클래스의 부모 객체를 가리키는 참조변수
자식 클래스 내에서 부모 클래스 객체에 접근하여 필드나 메서드 호출 시 사용함.

// ---------------------------------------- //


오버라이딩 : 부모메서드에 자식 메서드를 덮어씌우는 것(올라타기)
- 후손의 것이 우선권을 가짐(덮어씌워졌으니까)

- 메서드 선언부 위에 반드시 Annotation : @Override 표시
    "Accnotation : 컴파일러에게 특정 작업 지시하는 메서드"
    " @Override : Override 구문 문제 없이 작성되는지 실시간 검사하라"

- 접근 제어자를 부모 것보다 같거나 넓은 범위로 변경 가능
    접근 제어자 종류
        1. public       : 어디서나 접근 가능함
        2. protected    : 같은 패키지, 해당 클래스를 상속받은 하위 클래스에서 접근 가능
        3. default      : 접근제어자 입력 안한 것으로(공백) 같은 패키지 내에서만 접근 가능
        4. private      : 같은 클래스 내에서만 접근 가능(상속받은 하위 클래스 불가)

- 부모 메서드의 예외처리 클래스 처리범위보다 좁은 범위로 예외처리 클래스 수정 가능

오버라이딩 성립 조건
    - 부모 클래스의 메서드와 자식 클래스의 메서드 비교하여 아래 사항 준수
        1. 메서드 이름 동일
        2. 매개변수의 개수, 타입, 순서 동일
        3. 리턴 타입 동일
        4. private 접근 제어자는 오버라이딩 불가
        5. 접근 제어자는 부모와 같거나 넓은 범위로 변경 가능
        6. 예외처리는 부모와 같거나 좁은 범위로 예외처리 변경 가능
        ** 내부에서 작성하는 코드만 Override를 통해서 덮어쓸 수 있음

// ---------------------------------------------------------------- //

다형성 polymorphism
하나의 행동으로 여러가지 일을 수행하는 개념
상속을 이용한 기술로 부모 클래스 타입 참조변수 하나로
상속관계에 있는 여러 타입의 자식 객체를 참조할 수 있는 기술

- 상속 관계의 자식 객체의 모습이 여러 모습으로 보임
    -> 자식객체, 부모 객체, Object 객체 등으로 변하는 것처럼 보임

다형성의 유형
    1. 부모 타입 참조변수 = 자식객체;
        -> 자식 객체 => 부모 객체(Up Casting, 업캐스팅)
        -> 부모 타입 참조변수는 부모 객체 받음
        -> 상속 받은 자식 클래스 내부의 부모 객체를 부모 객체로 인식.
        -> 자식 객체의 모습이 부모 객체로 변한 것 처럼 보임

    2. Down Casting 다운캐스팅
        - 부모타입 참조변수가 자식 객체를 받을 수 있게 되는 방법
        - 부모타입 참조변수를 자식 타입으로 강제 형변환





// ---------------------------------------------------------------- //



// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //


// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //

*** 컬렉션 *** 

자료구조 : 메모리상에서 자료를 구조적으로 처리하는 방법
    - 메모리에서 구조적으로 처리하는 방법론
컬렉션 : 자바에서 제공하는 자료구조를 담당하는 프레임 워크
자료구조적 알고리즘 구현 필요 없이 추가, 삭제, 정렬 등의 기능처리 간단하게 해결됨

배열과 컬렉션의 차이

    배열
     - 한번 크기 지정 하면 변경 불가
     - 기록된 데이터에 대한 중간 위치의 추가, 삭제 불가
     - 한 타입의 데이터만 가능함
    
    컬렉션
     - 저장하는 크기의 제약 없음
     - 추가, 삭제, 정렬 등의 기능 처리 간단하게 해결됨 (알고리즘 구현 필요 없음)
     - 여러 타입의 데이터 저장 가능함
        - 객체만 저장 가능함.
        - 기본 자료형 저장할 경우 Wrapper 클래스 사용
        - Object로 저장 가능하고 꺼냈을 때도 Object로 인식됨

컬렉션의 주요 인터페이스
    컬렉션 프레임워크
        1. List 계열
         - 특징 : 순서를 유지하고 저장 / 
                  / 인덱스가 존재함 -> 중복 저장 가능
         - 구현 클래스
            1) ArrayList
            2) Vector
            3) LinkedList

        2. Set 계열
        - 특징 : 순서를 유지하지 않고 저장, 중복저장 안됨
        - 구현 클래스
            1) HashSet
            2) TreeSet

        3. Map
        - 특징 (Key : Value)값의 쌍으로 저장, Key는 중복저장 안됨
        - 구현 클래스
            1) HashMap
            2) HashTable
            3) TreeMap
            4) Properties


// ---------------------------------------------------------------- //

Set(집합 주머니)
    기본적으로 순서를 유지하지 않음
        -> index 없음, get() 메서드 없음
    중복 데이터 저장 안함 (같은 객체가  들어오면 덮어쓰기함)

    Set 인터페이스의 자식 클래스

        1. HashSet(대표) : 처리 속도가 빠른 set
            동일객체, 동등객체 모두 중복 저장 안함
            * 동일객체 
            - 참조변수가 같은 객체를 가리키고 있는 경우.
            - == 연산자로 비교 가능
                - String str1 = new Stirng("hello");
                - String str2 = str1 일 때 str1, str2는 서로 동일 객체
            * 동등객체 
             - 논리적으로 같은 내용 또는 값을 가지고 있는 경우
             - equals()메서드로 비교 가능
                - k1 : v1, k2 :v1 -> k1, k2는 서로 동등객체

        2. LinkedHashset : 순서를 유지하는  set
            HashSet과 거의 동일하지만 Set에 추가되는 순서를 유지하는 점이 다름

        3. TreeSet : 자동 정렬되는 set
        
    1. HashSet의 사용 조건
        1) 객체에 equals()가 오버라이딩 되어 있어야 한다.
        2) 객체에 hashCode()가 오버라이딩 되어 있어야 한다.
         - 자바에서 제공하는 객체(String, Integer)는 모두 오버라이딩 되어 있음

// ---------------------------------------------------------------- //

Map
- 키, 값(Key, Value) 으로 구성되어 있으며 키와 값은 모두 객체
- Key, Value 한 쌍을 Map Entry 라고 한다.
- 키는 중복저장 허용x(Set방식) / 값은 중복 저장가능(List 방식)
- 키가 중복되는 경우, 기존에 있는 키에 해당하는 값을 덮어 씌움

Map 구현 클래스
    1. HashMap
        hashCode(), equals()를 재정의해 동등 객체가 될 조건을 정해야함
        String 타입을 주로 사용
        ex) Hashmap<String, Integer> hashMap = new Hashmap<>();
    2. HashTable
    3. LinkedHashMap
    4. Properties
    5. TreeMap


// ---------------------------------------------------------------- //

Wrapper Class
 - 기본 자료형(8가지)를 객체(속성, 기능)로 감싸는 클래스
 - 기본 자료형의 객체화
    -> 컬렉션처럼 객체만 취급하는 상황에서 
       기본 자료형도 취급 가능한 형태로 바꾸기 위해 사용함

 - Wrapper Class는 Boxing, Unboxing 의 형태로 이루어짐

    Unboxing    <--> Boxing
	
    boolean 	<--> Booelan
    byte		<--> Byte
    short		<--> Short
    int			<--> Integer
    long		<--> Long
    float		<--> Float
    double		<--> Double
    char		<--> Character

 Boxing, Unboxing 자동으로 수행하도록 구현함

 Wrapper Class를 이용해 객체화 되었을 때 추가적인 필드와 기능 제공

// ---------------------------------------------------------------- //

String의 불변성(변하지 않는 성질 == 상수)
 - String 객체가 생성되면 그 값을 변경 할 수 없다.
 - 수정된 값은 새로운 String 객체를 생성하여 표현함

    ++ identityHashCode -> 주소값을 기반으로 만들어진 해시코드(식별번호)
        -> 주소값이 다르다면 hashCode도 다르게 나옴

리터럴(문자열, "")로 생성된 String 객체
 - 동일한 리터럴을 이용해 String 객체 생성한 경우
   기존에 존재하는 String 객체의 주소를 재활용함.

 - 동일한 리터럴로 String 객체를 추가 생성하면 
   새로운 String 객체를 만드는 것이 아닌 기존 String 객체의 주소를 재활용함.

String 객체의 사용자(개발자)관리
 - new 연산자로 생성함 -> String str = new String("qwer");
 - 기존 String객체와 새 String 객체의 리터럴이 같아도 
   기존 String 객체의 주소 재활용이 아닌 새로운 String 객체를 생성함

StringBuilder / StringBuffer 클래스
 - String은 원래 불변성이나 가변성을 띄게 함(mutable)
 - 기본 16글자 저장할 크기로 생성됨
 - 저장되는 문자열의 길이에 따라 크기는 증감함
    -> 문자열 수정 자유롭게 가능
    -> 수정, 삭제를 해도 추가적인 객체 생성이 없어 효율 높아짐

 - StringBuilder : Thread Safe 미제공(추천되는 방식)
 - StringBuffer  : Thread Safe제공(동기화 O, 멀티스레드 환경에서 추천됨)

 + Thread Safe : 공유된 자원에 동시에 여러 스레드가접근하더라도 프로그램이 동작 가능

// ---------------------------------------------------------------- //

-- 예외 처리 ---
 
 - 목적 : 프로그램 오류(에러)해결
 - 방법 : Exception 클래스 이용. 모든 예외 클래스는 Exception클래스를 상속함

    오류의 종류
     - 컴파일 에러 : 잘못 쓴 코드. 소스 코드 수정으로 해결
     - 런타임 에러 : 실행 중 오류. if문으로 에러 처리
     - 시스템 에러 : 컴퓨터 오작동. 소스 코드 수정으로 해결 불가
    
    오류 해결 방법
     - 소스 코드 수정으로 해결 가능한 에러를 예외(Exception)이라 함.
     - 이러한 Exception (예측 가능한 에러)구문을 처리하는 방법인 예외처리를 통해 해결

Exception 확인하기
 - Java API Document에서 해당 클래스에 대한 생성나자 메소드 검색
    -> 발생하는 예외를 미리 확인하여 상황에 따른 예외처리 코드 작성 가능

Exception 종류
    1. Checked Exception : 반드시 예외처리 해야함
    - try, catch, throw 구문 등

    2. UnChecked Exception : 예외처리 해도 그만 안해도 그만

예외처리 방식
    1. try - catch 구문
     - try {} : 예외가 발생할 가능성 있는 코드를 시도하는 구문
     - catch(예외){} : try 구문 실행 중 예외가 발생되어 던져진 경우
                       던져진 예외와 catch(예외)가 같다면 {} 안의 구문 수행
                       발생된 예외를 잡아서 처리하여 프로그램이 멈추지 않고 정상 수행됨
        -> catch 구문 이어서 작성 가능함
    
    2. try - catch - finally
     - finally : 예외 발생 여부와 관계 없이 무조건 수행해야 하는 구문 작성
     - 다른 예외 처리 방법 동원 시 catch 건너뛰기 가능
     - Java - 외부 프로그램/ 장치 연결을 끊을 때 주로 사용(키보드 입력 등)


+ throw 
 - 예외 강제 발생.
 - 예외 객체를 현재 위치에서 던짐

+ throws 
 - 어떤 예외가 발생 될 수 있는지 명시.
 - 예외를 당장 던지는 것이 아님. 어떤 예외가 던져 질 수 있는지
 - 예외가 발생 된다면 발생된 예외를 호출한 곳으로 던짐
 - 여러 군데 발생한 예외를 한군데에 모아서 처리함
 - 오버라이딩 시 throws 되는 예외의 개수와 상관 없이 처리 범위가 같거나 후손이어야함
    -> Exception은 상속될 수록 상위 클래스보다 예외 내용이 더 상세하게.
 
+ InputStreamReader(System.in) : 키보드 입력을 읽는 객체

+ BufferReader() : 효율적으로 읽어오기 -> 속도가 압도적으로 빠름
  -> Scanner 보단 기능이 부족함
  -> 부족한 기능(int, double 입력 등)은 다음 기능 이용으로 보완
    --> Integer.parseInt(문자열), Double.praseDouble(문자열)
    --> 각각 문자열을 Int, Double로 박싱하여 객체화 시키는 기능

+ br.readLine() : 입력된 한 줄 엔터까지 읽어오기

Excpetion : 코드로 처리 가능한 에러
Exception Handling : Exception 발생 시 처리하는 구문

// ---------------------------------------------------------------- //

IO (Input, Output) 입출력
- 컴퓨터 내 외부 장치와 프로그램간의 데이터를 주고 받는 것
- 입출력 데이터 처리 기능 : Stream(공통)

**** IO 관련 코드는 IOException 발생할 가능성 높음
 --> try ~ catch ~ finally 구문 등으로 예외처리 작성 필수!!

입력과 출력은 서로 다른 기능임
Stream : 단방향 소통(일방적)
Piped Steam : 양방향 소통

File 클래스 : 파일 시스템의 파일을 표현하는 클래스
 기능 
 - 파일크기, 속성, 이름 등의 정보
 - 파일 생성 및 삭제 

 File 클래스 메서드
	 
    리턴타입  Methods			설명
    
    boolean   mkdir()          : 디렉토리 생성
    boolean   mkdirs()         : 경로상의 모든 디렉토리 생성
    boolean   createNewFile()  : 파일 생성
    boolean   delete()         : 파일/디렉토리 삭제
    String    getName()        : 파일 이름 반환
    String    parent()         : 파일이 저장된 디렉토리 반환
    String    getPath()        : 전체 경로 반환
    boolean   isFile()         : 현재 File 객체가 관리하는게 파일이면 true
    boolean   isDirectory()    : 현재 File 객체가 관리하는게 디렉토리 true
    boolean   exists()         : 파일/디렉토리가 존재하면 true, 아님 false
    long      length()         : 파일 크기 반환
    long      lastModified()   : 파일 마지막 수정일 (1970.01.01 09:00 부터 현재까지 지난 시간을 ms 단위로 반환)
    String[]  list()           : 디렉토리 내 파일 목록을 String[] 배열로 반환 -> 이름만 반환
    File[]    listFiles()      : 디렉토리 내 파일 목록을 File[] 배열로 반환   -> File클래스의 메서드 적용 가능

// ---------------------------------------------------------------- //

Stream
 - Java에서 Data가 이동하는 통로
 - 기본적으로 단방향

Byte 기반 Stream 
 - 1 Byte 단위로 데이터를 입/출력하는 Stream
 - 최상위 인터페이스 : InputStream, OutputStream
 - 문자열, 이미지, 영상, 오디오 등 모든 것을 입/출력 가능
 - 1바이트 단위로 입출력함(통로가 좁음) -> 속도가 느림



// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //
// ---------------------------------------------------------------- //

